# Based on NFT project example. Requires kernel >= 4.20 and nft >= 0.9.3

add table ip security
add table ip6 security

table ip security {

	secmark inet_server {
		"system_u:object_r:test_server_packet_t:s0"
	}

	map secmapping_in_out {
		type inet_service : secmark
		elements = { 65535 : "inet_server" }
	}

	chain input {
		type filter hook input priority 0;

		# label new incoming packets and add to connection
		ct state new meta secmark set tcp dport map @secmapping_in_out
		ct state new meta secmark set udp dport map @secmapping_in_out
		ct state new ct secmark set meta secmark

		# set label for est/rel packets from connection
		ct state established,related meta secmark set ct secmark
	}

	chain output {
		type filter hook output priority 0;

		# label new outgoing packets and add to connection
		ct state new meta secmark set tcp dport map @secmapping_in_out
		# 'established' is used here so that the error return is the
		# same as the 'iptables-load' tests (no reply from server)
		ct state established meta secmark set udp dport map @secmapping_in_out
		ct state new ct secmark set meta secmark

		# set label for est/rel packets from connection
		ct state established,related meta secmark set ct secmark
	}
}

table ip6 security {

	secmark inet_server {
		"system_u:object_r:test_server_packet_t:s0"
	}

	map secmapping_in_out {
		type inet_service : secmark
		elements = { 65535 : "inet_server" }
	}

	chain input {
		type filter hook input priority 0;

		ct state new meta secmark set tcp dport map @secmapping_in_out
		ct state new meta secmark set udp dport map @secmapping_in_out
		ct state new ct secmark set meta secmark

		ct state established,related meta secmark set ct secmark
	}

	chain output {
		type filter hook output priority 0;

		ct state new meta secmark set tcp dport map @secmapping_in_out
		ct state established meta secmark set udp dport map @secmapping_in_out
		ct state new ct secmark set meta secmark

		ct state established,related meta secmark set ct secmark
	}
}
